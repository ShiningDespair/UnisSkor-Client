{"ast":null,"code":"// cubehelix interpolation\n// based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n// http://astron-soc.in/bulletin/11June/289392011.pdf\n\nconst {\n  type,\n  clip_rgb,\n  TWOPI\n} = require('../utils');\nconst {\n  pow,\n  sin,\n  cos\n} = Math;\nconst chroma = require('../chroma');\nmodule.exports = function (start = 300, rotations = -1.5, hue = 1, gamma = 1, lightness = [0, 1]) {\n  let dh = 0,\n    dl;\n  if (type(lightness) === 'array') {\n    dl = lightness[1] - lightness[0];\n  } else {\n    dl = 0;\n    lightness = [lightness, lightness];\n  }\n  const f = function (fract) {\n    const a = TWOPI * ((start + 120) / 360 + rotations * fract);\n    const l = pow(lightness[0] + dl * fract, gamma);\n    const h = dh !== 0 ? hue[0] + fract * dh : hue;\n    const amp = h * l * (1 - l) / 2;\n    const cos_a = cos(a);\n    const sin_a = sin(a);\n    const r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a);\n    const g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a);\n    const b = l + amp * (+1.97294 * cos_a);\n    return chroma(clip_rgb([r * 255, g * 255, b * 255, 1]));\n  };\n  f.start = function (s) {\n    if (s == null) {\n      return start;\n    }\n    start = s;\n    return f;\n  };\n  f.rotations = function (r) {\n    if (r == null) {\n      return rotations;\n    }\n    rotations = r;\n    return f;\n  };\n  f.gamma = function (g) {\n    if (g == null) {\n      return gamma;\n    }\n    gamma = g;\n    return f;\n  };\n  f.hue = function (h) {\n    if (h == null) {\n      return hue;\n    }\n    hue = h;\n    if (type(hue) === 'array') {\n      dh = hue[1] - hue[0];\n      if (dh === 0) {\n        hue = hue[1];\n      }\n    } else {\n      dh = 0;\n    }\n    return f;\n  };\n  f.lightness = function (h) {\n    if (h == null) {\n      return lightness;\n    }\n    if (type(h) === 'array') {\n      lightness = h;\n      dl = h[1] - h[0];\n    } else {\n      lightness = [h, h];\n      dl = 0;\n    }\n    return f;\n  };\n  f.scale = () => chroma.scale(f);\n  f.hue(hue);\n  return f;\n};","map":{"version":3,"names":["type","clip_rgb","TWOPI","require","pow","sin","cos","Math","chroma","module","exports","start","rotations","hue","gamma","lightness","dh","dl","f","fract","a","l","h","amp","cos_a","sin_a","r","g","b","s","scale"],"sources":["C:/Users/mehme/OneDrive/Masaüstü/UniScore/uniscore/node_modules/chroma-js/src/generator/cubehelix.js"],"sourcesContent":["// cubehelix interpolation\n// based on D.A. Green \"A colour scheme for the display of astronomical intensity images\"\n// http://astron-soc.in/bulletin/11June/289392011.pdf\n\nconst {type, clip_rgb, TWOPI} = require('../utils');\nconst {pow,sin,cos} = Math;\nconst chroma = require('../chroma');\n\nmodule.exports = function(start=300, rotations=-1.5, hue=1, gamma=1, lightness=[0,1]) {\n    let dh = 0, dl;\n    if (type(lightness) === 'array') {\n        dl = lightness[1] - lightness[0];\n    } else {\n        dl = 0;\n        lightness = [lightness, lightness];\n    }\n\n    const f = function(fract) {\n        const a = TWOPI * (((start+120)/360) + (rotations * fract));\n        const l = pow(lightness[0] + (dl * fract), gamma);\n        const h = dh !== 0 ? hue[0] + (fract * dh) : hue;\n        const amp = (h * l * (1-l)) / 2;\n        const cos_a = cos(a);\n        const sin_a = sin(a);\n        const r = l + (amp * ((-0.14861 * cos_a) + (1.78277* sin_a)));\n        const g = l + (amp * ((-0.29227 * cos_a) - (0.90649* sin_a)));\n        const b = l + (amp * (+1.97294 * cos_a));\n        return chroma(clip_rgb([r*255,g*255,b*255,1]));\n    };\n\n    f.start = function(s) {\n        if ((s == null)) { return start; }\n        start = s;\n        return f;\n    };\n\n    f.rotations = function(r) {\n        if ((r == null)) { return rotations; }\n        rotations = r;\n        return f;\n    };\n\n    f.gamma = function(g) {\n        if ((g == null)) { return gamma; }\n        gamma = g;\n        return f;\n    };\n\n    f.hue = function(h) {\n        if ((h == null)) { return hue; }\n        hue = h;\n        if (type(hue) === 'array') {\n            dh = hue[1] - hue[0];\n            if (dh === 0) { hue = hue[1]; }\n        } else {\n            dh = 0;\n        }\n        return f;\n    };\n\n    f.lightness = function(h) {\n        if ((h == null)) { return lightness; }\n        if (type(h) === 'array') {\n            lightness = h;\n            dl = h[1] - h[0];\n        } else {\n            lightness = [h,h];\n            dl = 0;\n        }\n        return f;\n    };\n\n    f.scale = () => chroma.scale(f);\n\n    f.hue(hue);\n\n    return f;\n};\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAM;EAACA,IAAI;EAAEC,QAAQ;EAAEC;AAAK,CAAC,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnD,MAAM;EAACC,GAAG;EAACC,GAAG;EAACC;AAAG,CAAC,GAAGC,IAAI;AAC1B,MAAMC,MAAM,GAAGL,OAAO,CAAC,WAAW,CAAC;AAEnCM,MAAM,CAACC,OAAO,GAAG,UAASC,KAAK,GAAC,GAAG,EAAEC,SAAS,GAAC,CAAC,GAAG,EAAEC,GAAG,GAAC,CAAC,EAAEC,KAAK,GAAC,CAAC,EAAEC,SAAS,GAAC,CAAC,CAAC,EAAC,CAAC,CAAC,EAAE;EAClF,IAAIC,EAAE,GAAG,CAAC;IAAEC,EAAE;EACd,IAAIjB,IAAI,CAACe,SAAS,CAAC,KAAK,OAAO,EAAE;IAC7BE,EAAE,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC;EACpC,CAAC,MAAM;IACHE,EAAE,GAAG,CAAC;IACNF,SAAS,GAAG,CAACA,SAAS,EAAEA,SAAS,CAAC;EACtC;EAEA,MAAMG,CAAC,GAAG,SAAAA,CAASC,KAAK,EAAE;IACtB,MAAMC,CAAC,GAAGlB,KAAK,IAAK,CAACS,KAAK,GAAC,GAAG,IAAE,GAAG,GAAKC,SAAS,GAAGO,KAAM,CAAC;IAC3D,MAAME,CAAC,GAAGjB,GAAG,CAACW,SAAS,CAAC,CAAC,CAAC,GAAIE,EAAE,GAAGE,KAAM,EAAEL,KAAK,CAAC;IACjD,MAAMQ,CAAC,GAAGN,EAAE,KAAK,CAAC,GAAGH,GAAG,CAAC,CAAC,CAAC,GAAIM,KAAK,GAAGH,EAAG,GAAGH,GAAG;IAChD,MAAMU,GAAG,GAAID,CAAC,GAAGD,CAAC,IAAI,CAAC,GAACA,CAAC,CAAC,GAAI,CAAC;IAC/B,MAAMG,KAAK,GAAGlB,GAAG,CAACc,CAAC,CAAC;IACpB,MAAMK,KAAK,GAAGpB,GAAG,CAACe,CAAC,CAAC;IACpB,MAAMM,CAAC,GAAGL,CAAC,GAAIE,GAAG,IAAK,CAAC,OAAO,GAAGC,KAAK,GAAK,OAAO,GAAEC,KAAM,CAAE;IAC7D,MAAME,CAAC,GAAGN,CAAC,GAAIE,GAAG,IAAK,CAAC,OAAO,GAAGC,KAAK,GAAK,OAAO,GAAEC,KAAM,CAAE;IAC7D,MAAMG,CAAC,GAAGP,CAAC,GAAIE,GAAG,IAAI,CAAC,OAAO,GAAGC,KAAK,CAAE;IACxC,OAAOhB,MAAM,CAACP,QAAQ,CAAC,CAACyB,CAAC,GAAC,GAAG,EAACC,CAAC,GAAC,GAAG,EAACC,CAAC,GAAC,GAAG,EAAC,CAAC,CAAC,CAAC,CAAC;EAClD,CAAC;EAEDV,CAAC,CAACP,KAAK,GAAG,UAASkB,CAAC,EAAE;IAClB,IAAKA,CAAC,IAAI,IAAI,EAAG;MAAE,OAAOlB,KAAK;IAAE;IACjCA,KAAK,GAAGkB,CAAC;IACT,OAAOX,CAAC;EACZ,CAAC;EAEDA,CAAC,CAACN,SAAS,GAAG,UAASc,CAAC,EAAE;IACtB,IAAKA,CAAC,IAAI,IAAI,EAAG;MAAE,OAAOd,SAAS;IAAE;IACrCA,SAAS,GAAGc,CAAC;IACb,OAAOR,CAAC;EACZ,CAAC;EAEDA,CAAC,CAACJ,KAAK,GAAG,UAASa,CAAC,EAAE;IAClB,IAAKA,CAAC,IAAI,IAAI,EAAG;MAAE,OAAOb,KAAK;IAAE;IACjCA,KAAK,GAAGa,CAAC;IACT,OAAOT,CAAC;EACZ,CAAC;EAEDA,CAAC,CAACL,GAAG,GAAG,UAASS,CAAC,EAAE;IAChB,IAAKA,CAAC,IAAI,IAAI,EAAG;MAAE,OAAOT,GAAG;IAAE;IAC/BA,GAAG,GAAGS,CAAC;IACP,IAAItB,IAAI,CAACa,GAAG,CAAC,KAAK,OAAO,EAAE;MACvBG,EAAE,GAAGH,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;MACpB,IAAIG,EAAE,KAAK,CAAC,EAAE;QAAEH,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC;MAAE;IAClC,CAAC,MAAM;MACHG,EAAE,GAAG,CAAC;IACV;IACA,OAAOE,CAAC;EACZ,CAAC;EAEDA,CAAC,CAACH,SAAS,GAAG,UAASO,CAAC,EAAE;IACtB,IAAKA,CAAC,IAAI,IAAI,EAAG;MAAE,OAAOP,SAAS;IAAE;IACrC,IAAIf,IAAI,CAACsB,CAAC,CAAC,KAAK,OAAO,EAAE;MACrBP,SAAS,GAAGO,CAAC;MACbL,EAAE,GAAGK,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,MAAM;MACHP,SAAS,GAAG,CAACO,CAAC,EAACA,CAAC,CAAC;MACjBL,EAAE,GAAG,CAAC;IACV;IACA,OAAOC,CAAC;EACZ,CAAC;EAEDA,CAAC,CAACY,KAAK,GAAG,MAAMtB,MAAM,CAACsB,KAAK,CAACZ,CAAC,CAAC;EAE/BA,CAAC,CAACL,GAAG,CAACA,GAAG,CAAC;EAEV,OAAOK,CAAC;AACZ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}