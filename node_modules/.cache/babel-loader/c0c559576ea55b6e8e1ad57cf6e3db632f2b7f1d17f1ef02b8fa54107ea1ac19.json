{"ast":null,"code":"const Color = require('../Color');\nconst {\n  clip_rgb\n} = require('../utils');\nconst {\n  pow,\n  sqrt,\n  PI,\n  cos,\n  sin,\n  atan2\n} = Math;\nmodule.exports = (colors, mode = 'lrgb', weights = null) => {\n  const l = colors.length;\n  if (!weights) weights = Array.from(new Array(l)).map(() => 1);\n  // normalize weights\n  const k = l / weights.reduce(function (a, b) {\n    return a + b;\n  });\n  weights.forEach((w, i) => {\n    weights[i] *= k;\n  });\n  // convert colors to Color objects\n  colors = colors.map(c => new Color(c));\n  if (mode === 'lrgb') {\n    return _average_lrgb(colors, weights);\n  }\n  const first = colors.shift();\n  const xyz = first.get(mode);\n  const cnt = [];\n  let dx = 0;\n  let dy = 0;\n  // initial color\n  for (let i = 0; i < xyz.length; i++) {\n    xyz[i] = (xyz[i] || 0) * weights[0];\n    cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\n    if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n      const A = xyz[i] / 180 * PI;\n      dx += cos(A) * weights[0];\n      dy += sin(A) * weights[0];\n    }\n  }\n  let alpha = first.alpha() * weights[0];\n  colors.forEach((c, ci) => {\n    const xyz2 = c.get(mode);\n    alpha += c.alpha() * weights[ci + 1];\n    for (let i = 0; i < xyz.length; i++) {\n      if (!isNaN(xyz2[i])) {\n        cnt[i] += weights[ci + 1];\n        if (mode.charAt(i) === 'h') {\n          const A = xyz2[i] / 180 * PI;\n          dx += cos(A) * weights[ci + 1];\n          dy += sin(A) * weights[ci + 1];\n        } else {\n          xyz[i] += xyz2[i] * weights[ci + 1];\n        }\n      }\n    }\n  });\n  for (let i = 0; i < xyz.length; i++) {\n    if (mode.charAt(i) === 'h') {\n      let A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;\n      while (A < 0) A += 360;\n      while (A >= 360) A -= 360;\n      xyz[i] = A;\n    } else {\n      xyz[i] = xyz[i] / cnt[i];\n    }\n  }\n  alpha /= l;\n  return new Color(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);\n};\nconst _average_lrgb = (colors, weights) => {\n  const l = colors.length;\n  const xyz = [0, 0, 0, 0];\n  for (let i = 0; i < colors.length; i++) {\n    const col = colors[i];\n    const f = weights[i] / l;\n    const rgb = col._rgb;\n    xyz[0] += pow(rgb[0], 2) * f;\n    xyz[1] += pow(rgb[1], 2) * f;\n    xyz[2] += pow(rgb[2], 2) * f;\n    xyz[3] += rgb[3] * f;\n  }\n  xyz[0] = sqrt(xyz[0]);\n  xyz[1] = sqrt(xyz[1]);\n  xyz[2] = sqrt(xyz[2]);\n  if (xyz[3] > 0.9999999) xyz[3] = 1;\n  return new Color(clip_rgb(xyz));\n};","map":{"version":3,"names":["Color","require","clip_rgb","pow","sqrt","PI","cos","sin","atan2","Math","module","exports","colors","mode","weights","l","length","Array","from","map","k","reduce","a","b","forEach","w","i","c","_average_lrgb","first","shift","xyz","get","cnt","dx","dy","push","isNaN","charAt","A","alpha","ci","xyz2","col","f","rgb","_rgb"],"sources":["C:/Users/mehme/OneDrive/Masaüstü/UniScore/uniscore/node_modules/chroma-js/src/generator/average.js"],"sourcesContent":["const Color = require('../Color');\nconst {clip_rgb} = require('../utils');\nconst {pow, sqrt, PI, cos, sin, atan2} = Math;\n\nmodule.exports = (colors, mode='lrgb', weights=null) => {\n    const l = colors.length;\n    if (!weights) weights = Array.from(new Array(l)).map(() => 1);\n    // normalize weights\n    const k = l / weights.reduce(function(a, b) { return a + b; });\n    weights.forEach((w,i) => { weights[i] *= k })\n    // convert colors to Color objects\n    colors = colors.map(c => new Color(c));\n    if (mode === 'lrgb') {\n        return _average_lrgb(colors, weights)\n    }\n    const first = colors.shift();\n    const xyz = first.get(mode);\n    const cnt = [];\n    let dx = 0;\n    let dy = 0;\n    // initial color\n    for (let i=0; i<xyz.length; i++) {\n        xyz[i] = (xyz[i] || 0) * weights[0];\n        cnt.push(isNaN(xyz[i]) ? 0 : weights[0]);\n        if (mode.charAt(i) === 'h' && !isNaN(xyz[i])) {\n            const A = xyz[i] / 180 * PI;\n            dx += cos(A) * weights[0];\n            dy += sin(A) * weights[0];\n        }\n    }\n\n    let alpha = first.alpha() * weights[0];\n    colors.forEach((c,ci) => {\n        const xyz2 = c.get(mode);\n        alpha += c.alpha() * weights[ci+1];\n        for (let i=0; i<xyz.length; i++) {\n            if (!isNaN(xyz2[i])) {\n                cnt[i] += weights[ci+1];\n                if (mode.charAt(i) === 'h') {\n                    const A = xyz2[i] / 180 * PI;\n                    dx += cos(A) * weights[ci+1];\n                    dy += sin(A) * weights[ci+1];\n                } else {\n                    xyz[i] += xyz2[i] * weights[ci+1];\n                }\n            }\n        }\n    });\n\n    for (let i=0; i<xyz.length; i++) {\n        if (mode.charAt(i) === 'h') {\n            let A = atan2(dy / cnt[i], dx / cnt[i]) / PI * 180;\n            while (A < 0) A += 360;\n            while (A >= 360) A -= 360;\n            xyz[i] = A;\n        } else {\n            xyz[i] = xyz[i]/cnt[i];\n        }\n    }\n    alpha /= l;\n    return (new Color(xyz, mode)).alpha(alpha > 0.99999 ? 1 : alpha, true);\n};\n\n\nconst _average_lrgb = (colors, weights) => {\n    const l = colors.length;\n    const xyz = [0,0,0,0];\n    for (let i=0; i < colors.length; i++) {\n        const col = colors[i];\n        const f = weights[i] / l;\n        const rgb = col._rgb;\n        xyz[0] += pow(rgb[0],2) * f;\n        xyz[1] += pow(rgb[1],2) * f;\n        xyz[2] += pow(rgb[2],2) * f;\n        xyz[3] += rgb[3] * f;\n    }\n    xyz[0] = sqrt(xyz[0]);\n    xyz[1] = sqrt(xyz[1]);\n    xyz[2] = sqrt(xyz[2]);\n    if (xyz[3] > 0.9999999) xyz[3] = 1;\n    return new Color(clip_rgb(xyz));\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}